@page "/yatzy"
@using Yatzy.Models
@using YatziMethods
@using Yatzy.Components
<h3>Yatzy</h3>

<div class="d-flex justify-content-center">
	<button class="btn btn-dark" @onclick="() =>StartGame()">@startOrQuitGame</button>
</div>


@if (Createplayers)
{
	<section>
		<HeroTitle Title="Create Players" />
		<div class="d-flex justify-content-center">
			<div>
				<p class="inputErrorMessageAddPlayer">@inputErrorMessageAddPlayer</p>
				<input @bind="firstName" class="form-control w-100" placeholder="Förnamn" />
				<input @bind="lastName" class="form-control w-100" placeholder="Efternamn" />
				<button type="button" class="btn btn-dark my-3" @onclick="AddPlayer">Add Player</button>
				<button type="button" class="btn btn-dark my-3 text" @onclick="RemovePlayer">Remove Player</button>
				<p>@errorMessageIfWrongPlayer</p>
			</div>
		</div>
		<div class="d-flex justify-content-center">
			<div>
				@if (listOfAddedPlayers.Count > 0)
				{
					<h3 class="text-center">Tillagda spelare:</h3>
					foreach (Player player in listOfAddedPlayers)
					{
						<p class="text-center">@player.FirstName @player.LastName</p>
					}
				}
			</div>
		</div>
	</section>
}
else if (!Createplayers && finishedGame < listOfAddedPlayers.Count)
{
	<div class="container">
		<div class="row d-flex align-items-center">
			<div class="col-lg-4 col-md-12 col-sm-12">
				<div class="container game-container">
					<div class="row">
						<div class="col-lg-12 col-md-12 col-sm-12">
							<div>
								<h4 class="m-5 text-center">Spelare: @listOfAddedPlayers[indexOfCurrentPlayer].FirstName @listOfAddedPlayers[indexOfCurrentPlayer].LastName</h4>
								<h5 class="m-5 text-center">Spelare: Antal kast kvar: @throws</h5>
							</div>
							<section>
								<DiceComponent throws="throws" PlayerThrows="PlayerThrows" AddToScoreBoardList="ShowScoreboardChoice" @ref="ChildComponent" />
							</section>
						</div>
					</div>
				</div>
			</div>
			<div class="col-lg-8 col-md-12 col-sm-12">
			<Scoreboard ClearNGotoNextPlayer="ClearNGotoNextPlayer"
					Change="Change"
					listOfAddedPlayers="listOfAddedPlayers"
					SavedDiceList="SavedDiceList"
					indexOfCurrentPlayer="indexOfCurrentPlayer"
					protokoll="protokoll"
					showChoiceBool="showChoiceBool" />
			</div>
		</div>

	</div>
}

@if (listOfAddedPlayers.Count > 0)
{
	List<(int, string)> TotalPointsOfWinnerList = new();
	finishedGame = 0;
	foreach (Player player in listOfAddedPlayers)
	{
		int counter = 0;
		foreach ((int, string) score in player.playerScore)
		{
			if (score.Item1 > 0 || score.Item1 == -1)
			{
				if (score.Item2 != "Summa" && score.Item2 != "Bonus(63)" && score.Item2 != "Total summa")
				{
					counter++;
				}
			}
		}
		if (counter == 15)
		{
			finishedGame++;
			TotalPointsOfWinnerList.Add((player.playerScore[17].Item1, player.FirstName));
		}
		if (finishedGame == listOfAddedPlayers.Count)
		{
			for (int i = 0; i < listOfAddedPlayers.Count; i++)
			{
				if (TotalPointsOfWinnerList[i].Item1 > HighestNumber)
				{
					HighestNumber = TotalPointsOfWinnerList[i].Item1;
					nameOftheWinner = TotalPointsOfWinnerList[i].Item2;

				}
			}
			<div>
				<h2 class="text-center">The winner is: @nameOftheWinner with the total points of:@HighestNumber</h2>
			</div>
		}
	}
}





@code {
	string inputErrorMessageAddPlayer = "";
	string firstName = "";
	string lastName = "";
	string errorMessageIfWrongPlayer = "";
	string startOrQuitGame = "Start Game";
	string XtoScoreBoard = "";
	string nameOftheWinner = "";

	List<Protokoll> protokoll = new();
	List<Player> listOfAddedPlayers = new();
	List<int> SavedDiceList = SavedDice.SavedDiceList;
	List<int> listOfNumber = new();


	bool Createplayers = true;
	bool showChoiceBool = false;


	int indexOfCurrentPlayer = 0;
	int throws = 3;
	int HighestNumber = 0;
	int finishedGame = 0;


	//Metoden hämtar RefreshMe metoden från diceComponent.
	//RefreshMe renderar om DiceComponent
	protected Components.DiceComponent? ChildComponent;
	private void Change()
	{

		ChildComponent?.RefreshMe();
	}

	private void PlayerThrows()
	{
		if (throws > 0)
		{
			throws--;
		}
	}






	public void NextPlayer()
	{
		indexOfCurrentPlayer++;
		throws = 3;
		if (indexOfCurrentPlayer >= listOfAddedPlayers.Count)
		{
			indexOfCurrentPlayer = 0;
			throws = 3;
		}
	}

	public void ClearNGotoNextPlayer()
	{
		protokoll.Clear();
		SavedDiceList.Clear();
		listOfNumber.Clear();
		NextPlayer();
	}

	public void ShowScoreboardChoice()
	{
		var YatzyCalculator = new CalculatingPoints();

		if (SavedDiceList.Count == 5 && !showChoiceBool)
		{
			showChoiceBool = true;
			YatzyCalculator.EttTillSex(SavedDiceList, Player.ScoreBoardPoints, listOfAddedPlayers, indexOfCurrentPlayer, protokoll, listOfNumber);
			YatzyCalculator.Par(SavedDiceList, listOfAddedPlayers, indexOfCurrentPlayer, protokoll, listOfNumber);
			YatzyCalculator.TvåPar(SavedDiceList, listOfAddedPlayers, indexOfCurrentPlayer, protokoll);
			YatzyCalculator.Triss(SavedDiceList, listOfAddedPlayers, indexOfCurrentPlayer, protokoll);
			YatzyCalculator.Fyrtal(SavedDiceList, listOfAddedPlayers, indexOfCurrentPlayer, protokoll);
			YatzyCalculator.LitenStege(SavedDiceList, listOfAddedPlayers, indexOfCurrentPlayer, protokoll, listOfNumber);
			YatzyCalculator.StorStege(SavedDiceList, listOfAddedPlayers, indexOfCurrentPlayer, protokoll, listOfNumber);
			YatzyCalculator.Kåk(SavedDiceList, listOfAddedPlayers, indexOfCurrentPlayer, protokoll);
			YatzyCalculator.Chans(SavedDiceList, listOfAddedPlayers, indexOfCurrentPlayer, protokoll);
			YatzyCalculator.Yatzy(SavedDiceList, listOfAddedPlayers, indexOfCurrentPlayer, protokoll);

		}
		else
		{
			showChoiceBool = false;
			protokoll.Clear();
		}
	}

	public void AddPlayer()
	{
		if (!string.IsNullOrWhiteSpace(firstName) && !string.IsNullOrWhiteSpace(lastName))
		{
			if (listOfAddedPlayers.Any(n => n.FirstName == firstName && n.LastName == lastName))
			{
				inputErrorMessageAddPlayer = "Player already exists";
			}
			else
			{
				listOfAddedPlayers.Add(new Player(firstName, lastName));
				firstName = "";
				lastName = "";
				inputErrorMessageAddPlayer = "";
			}
		}
		else
		{
			inputErrorMessageAddPlayer = "Invalid first / last name, try again.";
		}
	}

	public void RemovePlayer()
	{
		try
		{
			var playersCopy = listOfAddedPlayers.ToList();

			foreach (var player in playersCopy)
			{

				if (player.FirstName == firstName && player.LastName == lastName)
				{
					errorMessageIfWrongPlayer = $"Player {player.FirstName} {player.LastName} has been removed from scoreboard";
					listOfAddedPlayers.Remove(player);
				}
				else
				{
					errorMessageIfWrongPlayer = $"Player does not exist";
				}
			}
		}
		catch
		{
			errorMessageIfWrongPlayer = $"Something went wrong";
		}
	}

	public void StartGame()
	{
		if (Createplayers && listOfAddedPlayers.Count > 0)
		{
			Createplayers = false;
			startOrQuitGame = "Quit Game";
		}
		else if (listOfAddedPlayers.Count == 0)
		{
			inputErrorMessageAddPlayer = "You have to create a player before you can start the game";
		}
		else
		{
			Createplayers = true;
			startOrQuitGame = "Start Game";
			ClearEverything();
		}
	}

	private void ClearEverything()
	{
		protokoll.Clear();
		listOfAddedPlayers.Clear();
		SavedDiceList.Clear();
		Change();
		throws = 3;
		listOfNumber.Clear();
		indexOfCurrentPlayer = 0;
	}
}

