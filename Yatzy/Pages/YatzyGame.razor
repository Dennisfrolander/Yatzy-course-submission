@page "/yatzy"
@using Yatzy.Models
@using YatziMethods
@using Yatzy.Components
<h3>Yatzy</h3>

<div class="d-flex justify-content-center">
	<button class="btn btn-dark" @onclick="() =>StartGame()">@startOrQuitGame</button>
</div>


@if (Createplayers)
{
	<section>
		<HeroTitle Title="Create Players" />
		<div class="d-flex justify-content-center">
			<div>
				<p class="inputErrorMessageAddPlayer">@inputErrorMessageAddPlayer</p>
				<input @bind="firstName" class="form-control w-100" placeholder="Förnamn" />
				<input @bind="lastName" class="form-control w-100" placeholder="Efternamn" />
				<button type="button" class="btn btn-dark my-3" @onclick="AddPlayer">Add Player</button>
				<button type="button" class="btn btn-dark my-3 text" @onclick="RemovePlayer">Remove Player</button>
				<p>@errorMessageIfWrongPlayer</p>
			</div>
		</div>
	</section>
}
else
{
	<div class="container game-container">
		<div class="row">
			<div class="col-lg-12 col-md-12 col-sm-8">
				<div>
					<h4 class="m-5 text-center">Spelare: @listOfAddedPlayers[indexOfCurrentPlayer].FirstName @listOfAddedPlayers[indexOfCurrentPlayer].LastName</h4>
					<h5 class="m-5 text-center">Spelare: Antal kast kvar: @throws</h5>
				</div>
				<section>
					<DiceComponent throws="throws" PlayerThrows="PlayerThrows" AddToScoreBoardList="ShowScoreboardChoice" @ref="ChildComponent"/>
				</section>
			</div>
		</div>
	</div>
}


<section>
	<HeroTitle Title="Scoreboard" />
	@if (listOfAddedPlayers.Count > 0)
	{
		<div class="container scoreboard-list-container">
			<div class="row">
				<div class="col p-0">
					<p class="scoreboard-list scoreboard-list-players scoreboard-list-background">Players:</p>
					@foreach (var pointName in Player.ScoreBoardPoints)
					{
						if (pointName == "Summa")
						{
							<p class="scoreboard-list scoreboard-list-points scoreboard-list-background">@pointName:</p>
						}
						else if (pointName == "Total summa")
						{
							<p class="scoreboard-list scoreboard-list-points scoreboard-list-background">@pointName:</p>
						}
						else
						{
							<p class="scoreboard-list scoreboard-list-points">@pointName:</p>
						}
					}
				</div>
				@*Kommentera denna raden*@
				@foreach (Player player in listOfAddedPlayers)
				{
					<div class="col p-0">
						<p class="scoreboard-list scoreboard-list-players">@player.FirstName @player.LastName[0]</p>


						@foreach ((int, string) score in player.playerScore)
						{

							if (SavedDiceList.Count == 5 && listOfAddedPlayers[indexOfCurrentPlayer].FirstName == player.FirstName && score.Item1 != -1)
							{
								int counter = 0;
								foreach (Protokoll item in protokoll)
								{
									if (score.Item2 == item.Choice)
									{
										if (score.Item1 == 0 && item.Check)
										{

											<div class="scoreboard-list">
												<span @onclick="(() =>SaveScore(item))" class="scoreboard-list-addpoints">@item.Points</span>
												@if (listOfAddedPlayers[indexOfCurrentPlayer].FirstName == player.FirstName && score.Item2 != "Summa" && score.Item2 != "Total summa" && score.Item1 == 0)
												{
													<span class="scoreboard-list-slash" @onclick="(() =>AddSlashToScoreboard(score))">/</span>
												}
											</div>
										}
									}
									else if (score.Item1 > 0)
									{
										<p class="scoreboard-list">@score.Item1</p>
										break;
									}
									else
									{
										counter++;
									}
								}
								if (counter == protokoll.Count)
								{
									<div class="scoreboard-list">
										<span>-</span>
										@if (listOfAddedPlayers[indexOfCurrentPlayer].FirstName == player.FirstName && score.Item2 != "Summa" && score.Item2 != "Total summa" && score.Item1 == 0)
										{
											<span class="scoreboard-list-slash" @onclick="(() =>AddSlashToScoreboard(score))">/</span>
										}
									</div>

								}

							}
							else if (score.Item1 == -1)
							{
								<p class="scoreboard-list scoreboard-list-struken text-center">X</p>
							}
							else if (score.Item1 > 0)
							{
								<p class="scoreboard-list">@score.Item1</p>
							}
							else
							{
								<div class="scoreboard-list">
									<span>-</span>
									@if (listOfAddedPlayers[indexOfCurrentPlayer].FirstName == player.FirstName && score.Item2 != "Summa" && score.Item2 != "Total summa" && score.Item1 == 0)
									{
										<span class="scoreboard-list-slash" @onclick="(() =>AddSlashToScoreboard(score))">/</span>
									}
								</div>
							}
						}
					</div>
				}
			</div>
		</div>
	}
	else
	{
		<p>You have to create players before you can see the scoreboard</p>
	}
</section>


@code {
	string inputErrorMessageAddPlayer = "";
	string firstName = "";
	string lastName = "";
	string errorMessageIfWrongPlayer = "";
	string startOrQuitGame = "Start Game";
	string XtoScoreBoard = "";


	List<Protokoll> protokoll = new();
	List<Player> listOfAddedPlayers = new();
	List<int> SavedDiceList = SavedDice.SavedDiceList;
	List<int> listOfNumber = new();


	bool Createplayers = true;
	bool showChoiceBool = false;
	int indexOfCurrentPlayer = 0;
	int throws = 3;

	protected Components.DiceComponent? ChildComponent;


    private void Change()
    {
		
		ChildComponent?.RefreshMe();
	}

	private void PlayerThrows()
	{
		if(throws > 0)
		{
			throws--;
		}
	}

	private void AddSlashToScoreboard((int, string) score)
	{
		int index = listOfAddedPlayers[indexOfCurrentPlayer].playerScore.IndexOf((0, score.Item2));
		if (listOfAddedPlayers[indexOfCurrentPlayer].playerScore[index].Item1 == 0)
		{
			listOfAddedPlayers[indexOfCurrentPlayer].playerScore[index] = (-1, score.Item2);
			Change();
			ClearNGotoNextPlayer();
		}
	}

	private void SaveScore(Protokoll item)
	{

		item.Submit = true;
		AddToScoreList();
		showChoiceBool = false;
		Change();
	}


	public void NextPlayer()
	{
		indexOfCurrentPlayer++;
		throws = 3;
		if (indexOfCurrentPlayer >= listOfAddedPlayers.Count)
		{
			indexOfCurrentPlayer = 0;
			throws = 3;
		}
	}

	public void AddXToScoreboard()
	{
		try
		{
			int index = listOfAddedPlayers[indexOfCurrentPlayer].playerScore.IndexOf((0, (char.ToUpper(XtoScoreBoard[0]) + XtoScoreBoard.Substring(1))));
			if (listOfAddedPlayers[indexOfCurrentPlayer].playerScore[index].Item1 == 0)
			{
				listOfAddedPlayers[indexOfCurrentPlayer].playerScore[index] = (-1, XtoScoreBoard);
				ClearNGotoNextPlayer();
				XtoScoreBoard = "";
			}
		}
		catch
		{

		}
	}

	public void bonusCounter()
	{
		int bonusPoints = 0;
		for (int i = 0; i < 6; i++)
		{
			if (listOfAddedPlayers[indexOfCurrentPlayer].playerScore[i].Item1 != 0)
			{
				bonusPoints += listOfAddedPlayers[indexOfCurrentPlayer].playerScore[i].Item1;
			}
		}
		if (bonusPoints >= 63 && listOfAddedPlayers[indexOfCurrentPlayer].playerScore[6].Item1 == 0)
		{
			listOfAddedPlayers[indexOfCurrentPlayer].playerScore[6] = (50, listOfAddedPlayers[indexOfCurrentPlayer].playerScore[6].Item2);
			listOfAddedPlayers[indexOfCurrentPlayer].playerScore[7] = (listOfAddedPlayers[indexOfCurrentPlayer].playerScore[7].Item1 + 50, listOfAddedPlayers[indexOfCurrentPlayer].playerScore[7].Item2);
			listOfAddedPlayers[indexOfCurrentPlayer].playerScore[17] = (listOfAddedPlayers[indexOfCurrentPlayer].playerScore[17].Item1 + 50, listOfAddedPlayers[indexOfCurrentPlayer].playerScore[17].Item2);
		}
	}
	public void AddToScoreList()
	{
		foreach (Protokoll item in protokoll)
		{
			if (item.Submit)
			{
				int index = listOfAddedPlayers[indexOfCurrentPlayer].playerScore.IndexOf((0, item.Choice));
				listOfAddedPlayers[indexOfCurrentPlayer].playerScore[index] = (item.Points, item.Choice);

				var currentStateOfTotalSumma = listOfAddedPlayers[indexOfCurrentPlayer].playerScore[17];
				currentStateOfTotalSumma = (currentStateOfTotalSumma.Item1 + item.Points, currentStateOfTotalSumma.Item2);
				listOfAddedPlayers[indexOfCurrentPlayer].playerScore[17] = currentStateOfTotalSumma;

				if (item.Choice == "Ettor" || item.Choice == "Tvåor" || item.Choice == "Treor" || item.Choice == "Fyror" || item.Choice == "Femmor" || item.Choice == "Sexor")
				{
					var currentStateOfSumma = listOfAddedPlayers[indexOfCurrentPlayer].playerScore[7];
					currentStateOfSumma = (currentStateOfSumma.Item1 + item.Points, currentStateOfSumma.Item2);
					listOfAddedPlayers[indexOfCurrentPlayer].playerScore[7] = currentStateOfSumma;

				}
			}
		}
		ClearNGotoNextPlayer();
		bonusCounter();
	}

	public void ClearNGotoNextPlayer()
	{
		protokoll.Clear();
		SavedDiceList.Clear();
		listOfNumber.Clear();
		NextPlayer();
	}

	public void ShowScoreboardChoice()
	{
		var YatzyCalculator = new CalculatingPoints();

		if (SavedDiceList.Count == 5 && !showChoiceBool)
		{
			showChoiceBool = true;
			YatzyCalculator.EttTillSex(SavedDiceList, Player.ScoreBoardPoints, listOfAddedPlayers, indexOfCurrentPlayer, protokoll, listOfNumber);
			YatzyCalculator.Par(SavedDiceList, listOfAddedPlayers, indexOfCurrentPlayer, protokoll, listOfNumber);
			YatzyCalculator.TvåPar(SavedDiceList, listOfAddedPlayers, indexOfCurrentPlayer, protokoll);
			YatzyCalculator.Triss(SavedDiceList, listOfAddedPlayers, indexOfCurrentPlayer, protokoll);
			YatzyCalculator.Fyrtal(SavedDiceList, listOfAddedPlayers, indexOfCurrentPlayer, protokoll);
			YatzyCalculator.LitenStege(SavedDiceList, listOfAddedPlayers, indexOfCurrentPlayer, protokoll, listOfNumber);
			YatzyCalculator.StorStege(SavedDiceList, listOfAddedPlayers, indexOfCurrentPlayer, protokoll, listOfNumber);
			YatzyCalculator.Kåk(SavedDiceList, listOfAddedPlayers, indexOfCurrentPlayer, protokoll);
			YatzyCalculator.Chans(SavedDiceList, listOfAddedPlayers, indexOfCurrentPlayer, protokoll);
			YatzyCalculator.Yatzy(SavedDiceList, listOfAddedPlayers, indexOfCurrentPlayer, protokoll);

		}
		else
		{
			showChoiceBool = false;
			protokoll.Clear();
		}
	}

	public void AddPlayer()
	{
		if (!string.IsNullOrWhiteSpace(firstName) && !string.IsNullOrWhiteSpace(lastName))
		{
			listOfAddedPlayers.Add(new Player(firstName, lastName));
			firstName = "";
			lastName = "";
			inputErrorMessageAddPlayer = "";
		}
		else
		{
			inputErrorMessageAddPlayer = "Invalid first / last name, try again.";
		}
	}

	public void RemovePlayer()
	{
		var playersCopy = listOfAddedPlayers.ToList();

		foreach (var player in playersCopy)
		{

			if (player.FirstName == firstName && player.LastName == lastName)
			{
				errorMessageIfWrongPlayer = $"Player {player.FirstName} {player.LastName} has been removed from scoreboard";
				listOfAddedPlayers.Remove(player);
			}
			else
			{
				errorMessageIfWrongPlayer = $"Player does not exist";
			}
		}
	}

	public void StartGame()
	{
		if (Createplayers && listOfAddedPlayers.Count > 0)
		{
			Createplayers = false;
			startOrQuitGame = "Quit Game";
		}
		else if (listOfAddedPlayers.Count == 0)
		{
			inputErrorMessageAddPlayer = "You have to create a player before you can start the game";
		}
		else
		{
			Createplayers = true;
			startOrQuitGame = "Start Game";
		}
	}
}

